# Using alpine-based build image since we run built binaries on alpine too.
FROM golang:1.11.5-alpine3.8 as multy-back-builder
LABEL org.label-schema.schema-version = "1.0"
LABEL org.label-schema.url = "http://multy.io"
LABEL org.label-schema.vcs-url = "https://github.com//multy-io/multy-back"
LABEL org.label-schema.name = "Multy Back builder image"
LABEL org.label-schema.description = "Collection of cached dependencies and build tools to simplify and speed up building multy-back on both CI/CD server and machine."
LABEL org.label-schema.usage = "Use as a base image: 'FROM multyio/multy-back-builder'"

ARG BUILD_DATE
ARG GIT_COMMIT
ARG GIT_BRANCH
ARG GIT_TAG
LABEL org.label-schema.build-date="$BUILD_DATE"
LABEL org.label-schema.git-branch="$GIT_BRANCH"
LABEL org.label-schema.vcs-ref="$GIT_COMMIT"
LABEL org.label-schema.version="$GIT_TAG"

# `git` is for `go get` to function properly.
# `make` is to build our binaries, with Makefile.
# `gcc` used to build libscep256k1 (go-ethereum dependecy).
# `libc-dev` provides headers libscep256k1 relies on.
RUN apk add git gcc make libc-dev && gcc --version

# Get a version of multy-back from current sources, fetch all dependencies
# clear multy-back sources, leaving all dependencies as part of the image.
COPY . $GOPATH/src/github.com/Multy-io/Multy-back
WORKDIR $GOPATH/src/github.com/Multy-io/Multy-back

# Download all dependencies of the multy-back
RUN go get -v ./...

# Check that project can be built and binaries appear to work Ok on this platform.
RUN make build -B && make canary-test && make test

# Cleanup
RUN rm -rf ./*
WORKDIR /